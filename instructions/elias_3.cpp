#include <iostream>

int sum(int a, int b) {
	a++;
	b++;
	return a + b;
}

int pointers_sum(int *a, int *b) {
	(*a)++;
	(*b)++;
	return (*a) + (*b);
}

int main() {
	//Указатели!

	int a = 10; //это ячейка с числом.
	int *pointer_a = &a; //в этой ячейке лежит адрес ячейки а.

	//Указатели можно передавать в функции. Тогда функция будет работать со значением ячейки, 
	//если её "разыменовать" -- то есть достать тот объект, что лежит по адресу.

	//Посмотрите, как это работает. При передаче по указателю внутри функции увеличились значения
	//переменных, а по значению -- нет.

	int b = 15;
	std::cout << sum(a, b) << std::endl;
	std::cout << a + b << std::endl;
	std::cout << pointers_sum(&a, &b) << std::endl;
	std::cout << a + b << std::endl;

	//Задание. Реализуйте структуру данных "односвязный список int-ов". Он представляет из себя набор
	//вершин, в каждой из которых лежит int и указатель на следующую вершину. В последней вершине должен лежать
	// нулевой указатель -- специальный объект nullptr.

	//struct Node {
		// ???
	//};

	//Напишите функции, которые склеивают два списка, считают длину списка и проверяют, есть ли в списке цикл.
	//интерфейс функций такой: Node* concat(Node* first_head, Node* second_head);

	system("pause");
}